#!/usr/bin/env node

/**
 * Module dependencies.
 */

// globals
serverConfig = require('../lib/Config')
serverUtils = require('../lib/Utils')
let log = serverUtils.getLogger('www')

let app = require('../app')
let http = require('http')
let https = require('https')
let fs = require('fs')

http.globalAgent.maxSockets = Infinity
https.globalAgent.maxSockets = Infinity

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || serverConfig.server.port || '8000')
app.set('port', port)

var server = {}
/**
 * Create HTTP server.
 */
if (serverConfig.server.scheme === 'HTTP') {
  server = http.createServer(app)
}

/**
 * Create HTTPS server.
 */
if (serverConfig.server.scheme === 'HTTPS') {
  var privateKey = fs.readFileSync(serverConfig.server.keyFile)
  var certificate = fs.readFileSync(serverConfig.server.certFile)
  server = https.createServer(
    {
      key: privateKey,
      cert: certificate
    },
    app
  )
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      log.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  log.info(
    `App is running ${serverConfig.server.scheme} service` +
    ` and listening on ${bind}`
  )
}
